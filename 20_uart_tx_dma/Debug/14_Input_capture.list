
14_Input_capture.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001f0  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000388  08000390  00010390  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000388  08000388  00010390  2**0
                  CONTENTS
  4 .ARM          00000000  08000388  08000388  00010390  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000388  08000390  00010390  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000388  08000388  00010388  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800038c  0800038c  0001038c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010390  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  08000390  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08000390  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010390  2**0
                  CONTENTS, READONLY
 12 .debug_info   000006d2  00000000  00000000  000103c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000186  00000000  00000000  00010a92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000078  00000000  00000000  00010c18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000050  00000000  00000000  00010c90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001064  00000000  00000000  00010ce0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000d1f  00000000  00000000  00011d44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00053743  00000000  00000000  00012a63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000661a6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000c8  00000000  00000000  000661f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000370 	.word	0x08000370

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	08000370 	.word	0x08000370

080001d8 <main>:


int timestamp=0;

/*Set up: connect a  jumper wire from PA5 to PA6*/
int  main(void){
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0

	tim2_pa5_output_compare();
 80001dc:	f000 f814 	bl	8000208 <tim2_pa5_output_compare>
	tim3_input_capture();
 80001e0:	f000 f840 	bl	8000264 <tim3_input_capture>

	while(1)
	{
       /*wait until edge is captured*/
		while(!(TIM3->SR & SR_CC1IF)){}
 80001e4:	bf00      	nop
 80001e6:	4b06      	ldr	r3, [pc, #24]	; (8000200 <main+0x28>)
 80001e8:	691b      	ldr	r3, [r3, #16]
 80001ea:	f003 0302 	and.w	r3, r3, #2
 80001ee:	2b00      	cmp	r3, #0
 80001f0:	d0f9      	beq.n	80001e6 <main+0xe>
	   /*read capured value*/
		timestamp = TIM3->CCR1;
 80001f2:	4b03      	ldr	r3, [pc, #12]	; (8000200 <main+0x28>)
 80001f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80001f6:	461a      	mov	r2, r3
 80001f8:	4b02      	ldr	r3, [pc, #8]	; (8000204 <main+0x2c>)
 80001fa:	601a      	str	r2, [r3, #0]
		while(!(TIM3->SR & SR_CC1IF)){}
 80001fc:	e7f2      	b.n	80001e4 <main+0xc>
 80001fe:	bf00      	nop
 8000200:	40000400 	.word	0x40000400
 8000204:	2000001c 	.word	0x2000001c

08000208 <tim2_pa5_output_compare>:
	/*Enable counter*/
    TIM2->CR1 = TIM2EN;
}

void tim2_pa5_output_compare(void)
{
 8000208:	b480      	push	{r7}
 800020a:	af00      	add	r7, sp, #0
	/*Enable clock access to tm2*/
	RCC->AHB1ENR |= TIM2EN;
 800020c:	4b14      	ldr	r3, [pc, #80]	; (8000260 <tim2_pa5_output_compare+0x58>)
 800020e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000210:	4a13      	ldr	r2, [pc, #76]	; (8000260 <tim2_pa5_output_compare+0x58>)
 8000212:	f043 0301 	orr.w	r3, r3, #1
 8000216:	6313      	str	r3, [r2, #48]	; 0x30
	/*Set Prescaler value*/
	TIM2->PSC = 1600-1 ;// 16 000 000/1600 =100000
 8000218:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800021c:	f240 623f 	movw	r2, #1599	; 0x63f
 8000220:	629a      	str	r2, [r3, #40]	; 0x28
	/*set auto-reload value*/
    TIM2->ARR = 10000-1; // 10000/10000 =1
 8000222:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000226:	f242 720f 	movw	r2, #9999	; 0x270f
 800022a:	62da      	str	r2, [r3, #44]	; 0x2c

    /*Set the output toggle compare mode*/
    TIM2->CCMR1 = OC_TOGGLE;
 800022c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000230:	2230      	movs	r2, #48	; 0x30
 8000232:	619a      	str	r2, [r3, #24]
    /*Enable tim2 ch1 compare mode*/
    TIM2->CCER |= CCER_CC1E;
 8000234:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000238:	6a1b      	ldr	r3, [r3, #32]
 800023a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800023e:	f043 0301 	orr.w	r3, r3, #1
 8000242:	6213      	str	r3, [r2, #32]


	/*Clear counter*/
    TIM2->CNT = 0;
 8000244:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000248:	2200      	movs	r2, #0
 800024a:	625a      	str	r2, [r3, #36]	; 0x24
	/*Enable counter*/
    TIM2->CR1 = TIM2EN;
 800024c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000250:	2201      	movs	r2, #1
 8000252:	601a      	str	r2, [r3, #0]
}
 8000254:	bf00      	nop
 8000256:	46bd      	mov	sp, r7
 8000258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800025c:	4770      	bx	lr
 800025e:	bf00      	nop
 8000260:	40023800 	.word	0x40023800

08000264 <tim3_input_capture>:

void  tim3_input_capture(void)
{
 8000264:	b480      	push	{r7}
 8000266:	af00      	add	r7, sp, #0
	/*Enable clock access to GPIOA*/
	RCC->AHB1ENR |= GPIOAEN;
 8000268:	4b17      	ldr	r3, [pc, #92]	; (80002c8 <tim3_input_capture+0x64>)
 800026a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800026c:	4a16      	ldr	r2, [pc, #88]	; (80002c8 <tim3_input_capture+0x64>)
 800026e:	f043 0301 	orr.w	r3, r3, #1
 8000272:	6313      	str	r3, [r2, #48]	; 0x30
	/*Enable clock access to tm2*/
	GPIOA-> MODER &=~ (1U<<12);
 8000274:	4b15      	ldr	r3, [pc, #84]	; (80002cc <tim3_input_capture+0x68>)
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	4a14      	ldr	r2, [pc, #80]	; (80002cc <tim3_input_capture+0x68>)
 800027a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800027e:	6013      	str	r3, [r2, #0]
	GPIOA-> MODER |=  (1U<<13);
 8000280:	4b12      	ldr	r3, [pc, #72]	; (80002cc <tim3_input_capture+0x68>)
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	4a11      	ldr	r2, [pc, #68]	; (80002cc <tim3_input_capture+0x68>)
 8000286:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800028a:	6013      	str	r3, [r2, #0]
	/*Set PA6 to alternate function type to TIM3_CH1(AF01)*/
	GPIOA->AFR[0] |= AFR6_TIM;
 800028c:	4b0f      	ldr	r3, [pc, #60]	; (80002cc <tim3_input_capture+0x68>)
 800028e:	6a1b      	ldr	r3, [r3, #32]
 8000290:	4a0e      	ldr	r2, [pc, #56]	; (80002cc <tim3_input_capture+0x68>)
 8000292:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000296:	6213      	str	r3, [r2, #32]

	/*Enable clock access to tm3*/
	RCC->APB1ENR |= TIM3EN ;
 8000298:	4b0b      	ldr	r3, [pc, #44]	; (80002c8 <tim3_input_capture+0x64>)
 800029a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800029c:	4a0a      	ldr	r2, [pc, #40]	; (80002c8 <tim3_input_capture+0x64>)
 800029e:	f043 0302 	orr.w	r3, r3, #2
 80002a2:	6413      	str	r3, [r2, #64]	; 0x40

	/*set prescaler*/
	TIM3->PSC =16000 ; //16 000 000/16000
 80002a4:	4b0a      	ldr	r3, [pc, #40]	; (80002d0 <tim3_input_capture+0x6c>)
 80002a6:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 80002aa:	629a      	str	r2, [r3, #40]	; 0x28

	/*set CH1 to capture to input mode */
	TIM3->CCMR1  = CCER_CC1S ;
 80002ac:	4b08      	ldr	r3, [pc, #32]	; (80002d0 <tim3_input_capture+0x6c>)
 80002ae:	2201      	movs	r2, #1
 80002b0:	619a      	str	r2, [r3, #24]
	/*set CH1 to capture at  rising edge*/
	TIM3->CCER =CCER_CC1E;
 80002b2:	4b07      	ldr	r3, [pc, #28]	; (80002d0 <tim3_input_capture+0x6c>)
 80002b4:	2201      	movs	r2, #1
 80002b6:	621a      	str	r2, [r3, #32]
	/*Enable TIM3*/
	TIM3->CR1 = CR1_CEN;
 80002b8:	4b05      	ldr	r3, [pc, #20]	; (80002d0 <tim3_input_capture+0x6c>)
 80002ba:	2201      	movs	r2, #1
 80002bc:	601a      	str	r2, [r3, #0]
}
 80002be:	bf00      	nop
 80002c0:	46bd      	mov	sp, r7
 80002c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c6:	4770      	bx	lr
 80002c8:	40023800 	.word	0x40023800
 80002cc:	40020000 	.word	0x40020000
 80002d0:	40000400 	.word	0x40000400

080002d4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002d4:	480d      	ldr	r0, [pc, #52]	; (800030c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002d6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002d8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002dc:	480c      	ldr	r0, [pc, #48]	; (8000310 <LoopForever+0x6>)
  ldr r1, =_edata
 80002de:	490d      	ldr	r1, [pc, #52]	; (8000314 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002e0:	4a0d      	ldr	r2, [pc, #52]	; (8000318 <LoopForever+0xe>)
  movs r3, #0
 80002e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002e4:	e002      	b.n	80002ec <LoopCopyDataInit>

080002e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002ea:	3304      	adds	r3, #4

080002ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002f0:	d3f9      	bcc.n	80002e6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002f2:	4a0a      	ldr	r2, [pc, #40]	; (800031c <LoopForever+0x12>)
  ldr r4, =_ebss
 80002f4:	4c0a      	ldr	r4, [pc, #40]	; (8000320 <LoopForever+0x16>)
  movs r3, #0
 80002f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002f8:	e001      	b.n	80002fe <LoopFillZerobss>

080002fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002fc:	3204      	adds	r2, #4

080002fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000300:	d3fb      	bcc.n	80002fa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000302:	f000 f811 	bl	8000328 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000306:	f7ff ff67 	bl	80001d8 <main>

0800030a <LoopForever>:

LoopForever:
  b LoopForever
 800030a:	e7fe      	b.n	800030a <LoopForever>
  ldr   r0, =_estack
 800030c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000310:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000314:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000318:	08000390 	.word	0x08000390
  ldr r2, =_sbss
 800031c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000320:	20000020 	.word	0x20000020

08000324 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000324:	e7fe      	b.n	8000324 <ADC_IRQHandler>
	...

08000328 <__libc_init_array>:
 8000328:	b570      	push	{r4, r5, r6, lr}
 800032a:	4d0d      	ldr	r5, [pc, #52]	; (8000360 <__libc_init_array+0x38>)
 800032c:	4c0d      	ldr	r4, [pc, #52]	; (8000364 <__libc_init_array+0x3c>)
 800032e:	1b64      	subs	r4, r4, r5
 8000330:	10a4      	asrs	r4, r4, #2
 8000332:	2600      	movs	r6, #0
 8000334:	42a6      	cmp	r6, r4
 8000336:	d109      	bne.n	800034c <__libc_init_array+0x24>
 8000338:	4d0b      	ldr	r5, [pc, #44]	; (8000368 <__libc_init_array+0x40>)
 800033a:	4c0c      	ldr	r4, [pc, #48]	; (800036c <__libc_init_array+0x44>)
 800033c:	f000 f818 	bl	8000370 <_init>
 8000340:	1b64      	subs	r4, r4, r5
 8000342:	10a4      	asrs	r4, r4, #2
 8000344:	2600      	movs	r6, #0
 8000346:	42a6      	cmp	r6, r4
 8000348:	d105      	bne.n	8000356 <__libc_init_array+0x2e>
 800034a:	bd70      	pop	{r4, r5, r6, pc}
 800034c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000350:	4798      	blx	r3
 8000352:	3601      	adds	r6, #1
 8000354:	e7ee      	b.n	8000334 <__libc_init_array+0xc>
 8000356:	f855 3b04 	ldr.w	r3, [r5], #4
 800035a:	4798      	blx	r3
 800035c:	3601      	adds	r6, #1
 800035e:	e7f2      	b.n	8000346 <__libc_init_array+0x1e>
 8000360:	08000388 	.word	0x08000388
 8000364:	08000388 	.word	0x08000388
 8000368:	08000388 	.word	0x08000388
 800036c:	0800038c 	.word	0x0800038c

08000370 <_init>:
 8000370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000372:	bf00      	nop
 8000374:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000376:	bc08      	pop	{r3}
 8000378:	469e      	mov	lr, r3
 800037a:	4770      	bx	lr

0800037c <_fini>:
 800037c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800037e:	bf00      	nop
 8000380:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000382:	bc08      	pop	{r3}
 8000384:	469e      	mov	lr, r3
 8000386:	4770      	bx	lr
